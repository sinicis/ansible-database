---
- name: add the OS specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- name: add the RHEL 7 specific variables
  include_vars: "{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"
  when: ansible_os_family == 'RedHat' and ansible_distribution_major_version|int == 7

- name: install the mysql packages in Redhat derivatives
  yum: name={{ item }} state=installed
  with_items: mysql_pkgs
  when: ansible_os_family == 'RedHat'

- name: Install the mysql packages in Debian derivatives
  apt: name={{ item }} state=installed
  with_items: mysql_pkgs
  environment: env
  when: ansible_os_family == 'Debian'

- name: create datadir if different to default
  file: path={{ mysql_data_dir }} state=directory owner=mysql group=mysql
  when: mysql_data_dir != '/var/lib/mysql'

- name: copy the my.cnf file
  template: src=my.cnf.{{ ansible_os_family }}.j2 dest={{ mysql_conf_dir }}/my.cnf
  notify:
   - restart mysql

- name: ensure mysql service has started/stopped
  service: name={{ mysql_service }} state={{ mysql_state }} enabled={{ mysql_enabled }}

- name: update mysql root password for all root accounts
  mysql_user: name=root host={{ item }} password={{ mysql_root_db_pass }}
  with_items:
   - "{{ ansible_hostname|lower() }}"
   - 127.0.0.1
   - ::1
   - localhost
  when: mysql_root_db_pass != ''

- name: copy .my.cnf file with root password credentials
  template: src=.my.cnf.j2 dest=/root/.my.cnf mode=0600
  when: mysql_root_db_pass != ''

- name: ensure anonymous users are not in the database
  mysql_user: name='' host={{ item }} state=absent
  with_items:
   - localhost
   - "{{ ansible_hostname|lower() }}"

- name: remove the test database
  mysql_db: name=test state=absent

- name: create the databases
  mysql_db: name={{ item.name }} state=present
  with_items: mysql_db
  when: mysql_db|lower() != 'none'

- name: create the database users
  mysql_user: name={{ item.name }} password={{ item.pass|default("foobar") }} priv={{ item.priv|default("*.*:ALL") }} state=present host={{ item.host | default("localhost") }}
  with_items: mysql_users
  when: mysql_users|lower() != 'none'

- name: create the replication users
  mysql_user: name={{ item.name }} host="%" password={{ item.pass|default("foobar") }} priv=*.*:"REPLICATION SLAVE" state=present
  with_items: mysql_repl_user
  when: mysql_repl_role == 'master'

- name: check if slave is already configured for replication
  mysql_replication: mode=getslave
  ignore_errors: true
  register: slave
  when: mysql_repl_role == 'slave'

- name: ensure the hostname entry for master is available for the client
  lineinfile: dest=/etc/hosts regexp="{{ mysql_repl_master }}" line="{{ mysql_repl_master + "   " +  hostvars[mysql_repl_master].ansible_default_ipv4.address }}" state=present
  when: slave|failed and mysql_repl_role == 'slave' and mysql_repl_master is defined

- name: get the current master servers replication status
  mysql_replication: mode=getmaster
  delegate_to: "{{ mysql_repl_master }}"
  register: repl_stat
  when: slave|failed and mysql_repl_role == 'slave' and mysql_repl_master is defined

- name: change the master in slave to start the replication
  mysql_replication: mode=changemaster master_host={{ mysql_repl_master }} master_log_file={{ repl_stat.File }} master_log_pos={{ repl_stat.Position }} master_user={{ mysql_repl_user[0].name }} master_password={{ mysql_repl_user[0].pass }}
  when: slave|failed and mysql_repl_role == 'slave' and mysql_repl_master is defined
